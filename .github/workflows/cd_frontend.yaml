name: frontend-ci

on:
  push:
    branches: ["main"]          # شغّل تلقائيًا عند أي تعديل على main
  workflow_dispatch:            # تشغيل يدوي عند الحاجة

concurrency:
  group: frontend-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_and_push:
    name: Build & Push Docker image
    runs-on: ubuntu-latest
    env:
      IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/frontend
      TAG: ${{ github.sha }}    # وسم ثابت لكل commit
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}  # استخدم نفس السر المستخدم في backend

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE }}:${{ env.TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy_to_k8s:
    name: Apply manifest, set image & rollout
    needs: build_and_push
    runs-on: self-hosted                   # الـrunner الموجود على EC2 والمتصل بالعنقود
    env:
      KUBECONFIG: /etc/kubernetes/admin.conf
      IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/frontend
      TAG: ${{ github.sha }}
      NAMESPACE: default                   # غيّرها إذا أردت
      DEPLOYMENT: frontend
      CONTAINER: web
      MANIFEST: k8s/frontend.yaml          # يفترض أن الملف موجود في الريبو
    steps:
      - uses: actions/checkout@v4

      - name: Sanity check (kubectl)
        run: |
          set -euo pipefail
          kubectl version --client
          kubectl get ns "$NAMESPACE" -o name

      - name: Apply manifest (create/update Service/Deployment)
        run: |
          kubectl -n "$NAMESPACE" apply -f "$MANIFEST"

      - name: Update image & wait for rollout
        run: |
          kubectl -n "$NAMESPACE" set image deploy/"$DEPLOYMENT" \
            "$CONTAINER"="${IMAGE}:${TAG}"

          kubectl -n "$NAMESPACE" annotate deploy/"$DEPLOYMENT" \
            ci.commit="${GITHUB_SHA}" ci.tag="${TAG}" --overwrite

          kubectl -n "$NAMESPACE" rollout status deploy/"$DEPLOYMENT" --timeout=300s

          echo -n "Resulting image: "
          kubectl -n "$NAMESPACE" get deploy "$DEPLOYMENT" \
            -o jsonpath='{.spec.template.spec.containers[?(@.name=="'"$CONTAINER"'")].image}{"\n"}'
